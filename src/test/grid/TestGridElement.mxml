<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.core.mx_internal;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;

			import spark.components.DataGrid;
			import spark.components.Grid;
			import spark.components.gridClasses.IDataGridElement;

			use namespace mx_internal;

			protected var scrollChanged:Boolean;
			protected var sizeChanged:Boolean;
			protected var collectionChanged:Boolean;

			private var _dataGrid:DataGrid;
			private var _dataProvider:IList;

			public function get dataGrid():DataGrid {
				return _dataGrid;
			}

			public function set dataGrid(value:DataGrid):void {
				clearDataGrid();
				_dataGrid=value;
				addDataGrid();

				layout.clearVirtualLayoutCache();

				invalidateSize();
				invalidateDisplayList();
			}

			private function clearDataGrid():void {
				if (_dataGrid) {
					var grid:Grid=_dataGrid.grid;

					grid.removeEventListener("dataProviderChanged", dataProviderChanged);
					grid.removeEventListener(ResizeEvent.RESIZE, gridResize);
					grid.removeEventListener(FlexEvent.UPDATE_COMPLETE, gridUpdateComplete);
				}
			}

			private function addDataGrid():void {
				var grid:Grid=_dataGrid.grid;

				grid.addEventListener("dataProviderChanged", dataProviderChanged);
				grid.addEventListener(ResizeEvent.RESIZE, gridResize);
				grid.addEventListener(FlexEvent.UPDATE_COMPLETE, gridUpdateComplete);

				dataProviderChanged();
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);

				if (!_dataProvider) {
					return;
				}

				draw(sizeChanged, scrollChanged, collectionChanged);

				sizeChanged=false;
				scrollChanged=false;
				collectionChanged=false;
			}

			protected function draw(sizeChanged:Boolean, scrollChanged:Boolean, collectionChanged:Boolean):void {
				var g:Graphics=canvas.graphics;
				g.clear();
				g.beginFill(0x000000, 0.1);
				g.drawRect(0, 0, unscaledWidth, unscaledHeight);
				g.endFill();

				var columns:int=_dataGrid.grid.columns.length;
				var f:int=-1;
				var fmax:int=columns;
				var bounds:Rectangle;

				while (++f < fmax) {
					bounds=_dataGrid.grid.getColumnBounds(f);
					g.beginFill(0x000000, 0.2);
					if (f === 0) {
						g.drawRect(bounds.x + 1, 0, bounds.width, unscaledHeight);
					} else {
						g.drawRect(bounds.x + 2, 0, bounds.width - 1, unscaledHeight);
					}
					g.endFill();
				}
			}

			private function dataProviderChanged(event:Event=null):void {
				if (_dataProvider) {
					_dataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChange);
					_dataProvider=null;
				}

				if (_dataGrid.dataProvider) {
					_dataProvider=_dataGrid.dataProvider;
					_dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChange);
					invalidateDisplayList();
				}
			}

			private function gridUpdateComplete(event:FlexEvent):void {
				if (_dataGrid.grid.isInvalidateDisplayListReason("horizontalScrollPosition")) {
					scrollChanged=true;
					invalidateDisplayList();
				}
			}

			private function gridResize(event:ResizeEvent):void {
				sizeChanged=true;
				invalidateSize();
			}

			private function collectionChange(event:CollectionEvent):void {
				collectionChanged=true;
				invalidateProperties();
			}
		]]>
	</fx:Script>

	<s:SpriteVisualElement id="canvas"/>

</s:Group>
