<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:grid="ssen.flexkit.components.grid.*"
			   xmlns:columns="ssen.flexkit.components.grid.columns.*" xmlns:components="ssen.showcase.views.components.*" initialize="init(event)"
			   viewSourceURL="srcview/index.html" xmlns:grid1="test.grid.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.apache.flex.collections.VectorCollection;
			
			import ssen.common.MathUtils;
			import ssen.showcase.models.EditableDataGridRow;
			import ssen.showcase.views.components.LinedAlert;

			[Bindable]
			public var data:IList;

			private function init(event:FlexEvent):void {
				var f:int=MathUtils.rand(5, 20);
				var vec:Vector.<EditableDataGridRow>=new Vector.<EditableDataGridRow>(f);
				while (--f >= 0) {
					vec[f]=new EditableDataGridRow;
				}
				data=new VectorCollection(vec);
			}

			private function showInformation(data:Object, column:ButtonGridColumn, rowIndex:int):void {
				trace("EditableDataGrid.showInformation(", data, column, rowIndex, ")");
				var msgs:Vector.<String>=new Vector.<String>;
				msgs.push("row : " + rowIndex);
				msgs.push("company : " + data.company);
				msgs.push("product : " + data.product);
				msgs.push("stock : " + numberFormatter.format(data.stock));
				msgs.push("price : " + numberFormatter.format(data.price));
				LinedAlert.show(msgs.join("\n"));
			}

			private function deleteCheckedRows(event:MouseEvent):void {
				var f:int=data.length;
				var row:EditableDataGridRow;
				while (--f >= 0) {
					row=data.getItemAt(f) as EditableDataGridRow;
					if (row.check) {
						data.removeItemAt(f);
					}
				}
			}

			private function addRow(event:MouseEvent):void {
				data.addItem(new EditableDataGridRow);
			}

			private function startEditCell(event:MouseEvent):void {
				grid.startItemEditorSession(1, 1);
			}

			private function changeDataCell(event:MouseEvent):void {
				EditableDataGridRow(data.getItemAt(2)).product="Product Changed!!!!";
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:NumberFormatter id="numberFormatter" fractionalDigits="0"/>
	</fx:Declarations>

	<s:layout>
		<s:VerticalLayout paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" gap="10" horizontalAlign="center" verticalAlign="top"/>
	</s:layout>

	<grid1:TestDataGrid id="grid" width="100%" height="100%" dataProvider="{data}" editable="true" skinClass="test.grid.TestDataGridSkin">
		<grid1:typicalItem>
			<fx:Object check="XX" company="XXXXXXX" product="XXXXXXXXXXXXXXXXXXXXXXXXXX" stock="8000000" price="800000000000" info="XXXXXXXXX"/>
		</grid1:typicalItem>
		<grid1:columns>
			<s:ArrayList>
				<columns:ToggleGridColumn dataField="check" headerText=""/>
				<columns:SelectionalGridColumn dataField="company" dataProviderField="companyList" headerText="COMPANY"/>
				<columns:BasicGridColumn dataField="product" headerText="PRODUCT"/>
				<columns:NumberGridColumn dataField="stock" minimumField="stockMinimum" maximumField="stockMaximum" headerText="STOCK"
										  itemRenderer="ssen.flexkit.components.grid.renderers.SpinnerGridRenderer"
										  itemEditor="ssen.flexkit.components.grid.editors.NumericStepperGridEditor"/>
				<columns:NumberGridColumn dataField="price" minimumField="priceMinimum" maximumField="priceMaximum" headerText="PRICE"/>
				<columns:ButtonGridColumn dataField="info" label="Show Infomation" headerText="" callback="showInformation"/>
			</s:ArrayList>
		</grid1:columns>
	</grid1:TestDataGrid>

	<s:HGroup width="100%" gap="5" verticalAlign="middle">
		<components:LinedButton label="Delete Checked Rows" click="deleteCheckedRows(event)"/>
		<components:LinedButton label="Add Row" click="addRow(event)"/>
		<components:LinedButton label="Start Edit 2 x 2 Cell" click="startEditCell(event)"/>
		<components:LinedButton label="Change Data 3 x 3 Cell" click="changeDataCell(event)"/>
		<s:Spacer width="100%"/>
		<s:Label text="Focus Move : Ctrl + Alt + Arrow Keys"/>
	</s:HGroup>
</s:Application>
